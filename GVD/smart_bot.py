from collections import deque, Counter

class HotNumbersBot:
    def __init__(self, initial_bank=1000, min_hot_count=2, history_len=50, max_attempts=10):
        self.initial_bank = initial_bank
        self.bank = initial_bank
        self.history = deque(maxlen=history_len)
        self.min_hot_count = min_hot_count   # –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–∞—Å—Ç—å –∑–∞ history_len —Å–ø–∏–Ω–æ–≤, —á—Ç–æ–±—ã –±—ã—Ç—å "–≥–æ—Ä—è—á–∏–º"
        self.max_attempts = max_attempts
        self.betting = False
        self.bet_targets = set()
        self.bet_attempts = 0

    def reset(self):
        self.betting = False
        self.bet_targets = set()
        self.bet_attempts = 0

    def get_hot_numbers(self):
        # –°—á–∏—Ç–∞–µ–º —á–∏—Å–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–ø–∏–Ω–æ–≤
        counter = Counter(self.history)
        # –ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞ ‚Äî —Ç–µ, —á—Ç–æ –≤—ã–ø–∞–ª–∏ —Ö–æ—Ç—è –±—ã min_hot_count —Ä–∞–∑
        hot_numbers = {num for num, count in counter.items() if count >= self.min_hot_count}
        return hot_numbers

    def simulate_on_file(self, filepath, logpath):
        with open(filepath, encoding='utf-8') as f:
            data = [
                int(part.strip())
                for line in f
                if (part := line.strip().split('-')[-1].strip()).isdigit()
            ]

        with open(logpath, 'w', encoding='utf-8') as log:
            for i, number in enumerate(data):
                self.history.append(number)
                log.write(f"[{i}] –í—ã–ø–∞–ª–æ: {number} | ")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞
                hot_numbers = self.get_hot_numbers()
                log.write(f"–ì–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞: {sorted(hot_numbers)} | ")

                # –ï—Å–ª–∏ –Ω–µ —Å—Ç–∞–≤–∏–º, –Ω–∞—á–∏–Ω–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞
                if not self.betting and hot_numbers:
                    self.bet_targets = set(hot_numbers)
                    self.betting = True
                    self.bet_attempts = 0
                    log.write(f"üö® –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∞: {sorted(self.bet_targets)}\n")
                    continue

                # –°—Ç–∞–≤–∏–º –Ω–∞ –≤—Å–µ –≥–æ—Ä—è—á–∏–µ —á–∏—Å–ª–∞
                if self.betting:
                    self.bank -= len(self.bet_targets)  # –æ–¥–Ω–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–µ –≥–æ—Ä—è—á–µ–µ —á–∏—Å–ª–æ
                    self.bet_attempts += 1
                    log.write(f"üéØ –°—Ç–∞–≤–∫–∞ –Ω–∞ {sorted(self.bet_targets)}. –í—ã–ø–∞–ª–æ {number}. ")

                    if number in self.bet_targets:
                        win = 36
                        self.bank += win
                        log.write(f"‚úÖ –ü–æ–±–µ–¥–∞! +{win - 1 * len(self.bet_targets)} | –ë–∞–Ω–∫: {self.bank}\n")
                        self.reset()
                    elif self.bet_attempts >= self.max_attempts:
                        log.write(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫. –°–±—Ä–æ—Å. | –ë–∞–Ω–∫: {self.bank}\n")
                        self.reset()
                    else:
                        log.write(f"–ú–∏–º–æ | –ü–æ–ø—ã—Ç–∫–∞ {self.bet_attempts}/{self.max_attempts} | –ë–∞–Ω–∫: {self.bank}\n")

        return self.bank

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üéØ –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –≥–æ—Ä—è—á–∏–º —á–∏—Å–ª–∞–º")
    filepath = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, data.txt): ").strip()
    logpath = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, hot_numbers_log.txt): ").strip()

    bot = HotNumbersBot()
    final_bank = bot.simulate_on_file(filepath, logpath)
    print(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–Ω–∫: {final_bank}")
