from collections import Counter

def parse_line(line):
    try:
        return line.strip().split('-')[-1].strip()
    except IndexError:
        return None

def parse_pattern(input_pattern):
    try:
        return list(map(int, input_pattern.strip().split()))
    except ValueError:
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞")
        return []

def find_all_patterns(filenames, pattern):
    next_numbers_counter = Counter()

    for filename in filenames:
        results = []

        try:
            with open(filename, 'r', encoding='utf-8') as f:
                for line in f:
                    number = parse_line(line)
                    if number in [str(n) for n in range(37)] + ['00']:
                        results.append(100 if number == '00' else int(number))
        except FileNotFoundError:
            print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue

        found_any = False
        for i in range(len(results) - len(pattern)):
            if results[i:i + len(pattern)] == pattern:
                if i + len(pattern) < len(results):
                    next_number = results[i + len(pattern)]
                    display_number = '00' if next_number == 100 else next_number
                    next_numbers_counter[display_number] += 1
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ {filename} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}. –°–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ: {display_number}")
                    found_any = True

        if not found_any:
            print(f"‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    print("\nüìä –ß–∞—Å—Ç–æ—Ç–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —á–∏—Å–µ–ª –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    for number, count in next_numbers_counter.most_common():
        print(f"{number}: {count} —Ä–∞–∑(–∞)")
    print("üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == "__main__":
    print("–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è N —á–∏—Å–µ–ª")

    input_files_raw = input("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").strip()
    input_files = input_files_raw.split()

    while True:
        input_pattern_raw = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
        if input_pattern_raw.lower() == 'exit':
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break

        if not input_pattern_raw:
            print("–ü—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            continue

        pattern = parse_pattern(input_pattern_raw)
        if pattern:
            find_all_patterns(input_files, pattern)
